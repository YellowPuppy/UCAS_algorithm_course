\documentclass[mathserif]{beamer}
\usepackage{beamerthemeshadow}
\usepackage{beamerthemesplit}
%\usetheme{shadow}
\usepackage{graphicx}
\usecolortheme{lily}
%\usepackage{amsmass}
%\usepackage{amssymb,amsfonts,url}

\usepackage{algorithm}
\usepackage{algorithmic}

\usepackage{graphicx}
\graphicspath{{Problems/}}
\usepackage{subfigure}
%\usepackage{CJK}
%\usepackage{pinyin}


\title{CS711008Z  Algorithm Design and Analysis }
\subtitle{ Lecture 3. NP and intractability (Part I) \footnote{The slides are prepared based on Introduction to algorithms, Algorithm design, and Computer and Intractability.} }
\author{Dongbo Bu \\
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \  \\
{\small Institute of Computing Technology \\ Chinese Academy of Sciences, Beijing, China}}
\date{}


\begin{document}
%\begin{CJK}{UTF8}{cyberbit}

\frame{\titlepage}


\frame{
\frametitle{Outline}
\begin{itemize}
 \item Problem intrinsic property: hardness
 \item Reduction: to identify the relationship between different problems; 
\end{itemize}
}

\frame{
\frametitle{NP-Completeness Cartoon: Bandersnatch problem  }
\begin{itemize}
 \item 


One day your boss calls you into his office and confides that the company is about to enter the highly competitive "bandersnatch" market. 

\item
A good method is needed for determining whether or not any given set of specifications for a new bandersnatch component can be met and, if so, for constructing a design that meets them. 

\item
Since you are the company's chief algorithm official, your charge is to find an efficient algorithm for doing this.
\end{itemize}
\footnote{Excerpted from Computer and Intractability (by Garey and Johnson)}

}


\frame{
\frametitle{Trial 1: attempt to solve this problem}
\begin{itemize}
 \item 


Some weeks later, you have not been able to come up with any algorithm substantially better than searching through all possible designs. This would involve years of computation time for just one set of specifications. 

\item
You simply return to your boss's office and report: ``I can't find an efficient algorithm, I guess I'm just too dumb. ''
\end{itemize}
\begin{figure}
        \centering
        \includegraphics[width=2in]{L3-NPCartoon1.eps}
\end{figure}

But perhaps this is unfair to you: \textcolor{red}{ the problem might be intrinsically hard. }
}

\frame{
\frametitle{Trial 2: try to prove the hardness directly}
\begin{itemize}
 \item 

So it would be much better if you could prove that the bandersnatch problem is inherently intractable, that no algorithm could possibly solve it quickly. 

\item
Then you could stride confidently into the boss's office and proclaim: \textcolor{red}{`` I can't find an efficient algorithm, 
because no such algorithm is possible. ''}
\end{itemize}
\begin{figure}
        \centering
        \includegraphics[width=1.85in]{L3-NPCartoon2.eps}
\end{figure}

Unfortunately, proving inherent intractability can be just as hard as finding efficient algorithms. 
}

\frame{
\frametitle{Trial 3: to show the relative hardness with other hard problems  }
\begin{itemize}
 \item 

 For such a ``grey area'' problem, an alternative way is to prove that the problem is ``just as hard as'' a large number of other problems that are widely recognize as being difficult and that have been confounding the experts for years.

\item
 \textcolor{red}{``I can't find an efficient algorithm, but neither can all these famous people. '' }
\end{itemize}
\begin{figure}
        \centering
        \includegraphics[width=1.5in]{L3-NPCartoon3.eps}
\end{figure}
}

\frame{
\frametitle{Trial 3: to show the relative hardness with other hard problems. cont'd }

Two advantages: 
\begin{itemize}

\item  At the very least, this would inform your boss that it would do no good to fire you and hire another expert on  algorithms. 

\item  More importantly, you can spend your time looking for efficient algorithms that solve various special cases of the general problem. 
\end{itemize}
}


\frame{
\frametitle{Hardness or complexity: an intrinsic property of problem }

Problems can be:
\begin{itemize}
 \item  Easy (existing polynomial-time algorithm): {\sc StableMatching} problem;
 \item  NP-hard: {\sc Satisfiability} problem; 
 \item  Truly hard (provably non-polynomial, exponential): Given a Turing machine, does it halt in  at most $k$ steps? 
 \item  Impossible: {\sc HALT} problem
\end{itemize}
}

\frame{
\frametitle{Abstracting problem}

\begin{itemize}
 \item 
Problem: consisting of \texttt{INPUT} and \texttt{OUTPUT} parts. \\
 Formally, a problem can be described as a {\it relation} $P \subseteq I\times S$, where $I$ denotes the {\it problem input}, and $S$ denotes the set of problem {\it solutions}. \\
\item Instance: a particular \texttt{INPUT}. 
\end{itemize}

Example: {\sc s-t Connectivity} problem

\begin{block}{}
{\bf INPUT:} a graph $G=<V,E>$, two vertices $s$, and $t$; \\
{\bf OUTPUT:} a path from $s$ to $t$; ( or ``NO'' if there is no such path)
\end{block}

Instance: a particular \texttt{INPUT}, including $G$, and $s$, $t$. 

  \begin{figure}
  \includegraphics[width=1in]{L3-connectivity.eps}
  \end{figure}
}

\frame{
\frametitle{Two types of problems: Optimization problem}
\begin{itemize}
 \item 
Optimization problem: given an instance $x \in I$, to find the ``best'' solution $y^*$ according to some measure. 
\item 
Example: {\sc Shortest-Path} problem

\begin{block}{}
{\bf INPUT:}  a graph $G=<V,E>$, two vertices $s$, and $t$; \\
{\bf OUTPUT:}  the shortest path from $s$ to $t$, or ``NO'' if there is no path from $s$ to $t$;
\end{block}
\end{itemize}

\begin{figure}
  \includegraphics[width=1.0in]{L3-shortestpath.eps}
\end{figure}

}

\frame{
\frametitle{Two types of problems: Decision problem}
\begin{itemize}
 \item 
Decision problem: the relation $P \subseteq I\times S$ reduces to a function $f: I \mapsto S$, where $S={YES, NO}$.
\item


Example: {\sc Path} problem
\begin{block}{}
{\bf INPUT:} a graph $G=<V,E>$, two vertices $s$, and $t$, and \textcolor{red}{an integer $k$};\\
{\bf OUTPUT:} a path from $s$ to $t$ with length at most $k$; 
\end{block}
\end{itemize} 

\begin{figure}
        \centering
        \includegraphics[width=1.3in]{L3-decisionproblem.eps}
\end{figure}
}

\frame{
\frametitle{The relationship between decision problem  and optimization problem}
\begin{itemize}
 \item The decision problem is in a sense ``easier''. \\
\item
An optimization problem can be cast to a related decision problem by imposing a bound of the value to be optimized. 
\item 
 We can solve {\sc Path} problem by solving the {\sc Shortest Path} problem, and then comparing the length of the shortest path with the decision problem parameter $k$. \\
% \item Conversely, we can solve the optimization problem through solving the decision problem;
\end{itemize}
}


\frame{
\frametitle{Reduction: uncovering the connection between two problems}
\begin{itemize}
 \item 


Polynomial-time reduction: a procedure to transform ANY instance $\alpha$ of problem $A$ to some instance $\beta=f(\alpha)$ of problem $B$ with the following characteristics: 
\begin{enumerate}
 \item (Transformation) The transformation takes polynomial time; \\
\item (Equivalence) The answers are the same: the answer for $\alpha$ is ``YES'' iff the answer to $\beta=f(\alpha)$ is also ``YES''.
\end{enumerate} 
\item  
Denoted as $A \leq_P B$, read as `` {\it A is reducible to  B  }''.
\end{itemize}

\begin{figure}
        \centering
        \includegraphics[width=1.5in]{L3-reduction.eps}
\end{figure}
}

\frame{
\frametitle{The significance of polynomial-time reduction}

\begin{theorem}
 If $B$ can be solved in polynomial time, $A$ is also polynomially solvable. 
\end{theorem}
The algorithm to problem $A$ is described as follows:\\

 \begin{algorithmic}[1]
 \STATE  Given an instance $\alpha$ of problem $A$, use polynomial-time reduction to transform it to $\beta=f(\alpha)$; 
 \STATE Run the polynomial-time algorithm for $B$ on the instance $\beta=f(\alpha)$;
 \STATE Use the answer to $\beta$ as the answer to $\alpha$. 
 \end{algorithmic}
\begin{theorem}
Conversely, if $A$ is hard, then $B$ is hard, too.  
\end{theorem}
}




\frame{
\frametitle{}
\begin{block}{}
 A simple reduction: {\sc IndependentSet} $\le_P$ {\sc VertexCover}
\end{block}
}


\frame{
\frametitle{ {\sc Independent Set} Problem}
\begin{itemize}
 \item 
Practical problem: \\ {\em 
 	Suppose you have $n$ friends, and some pairs of them don't get along. How to invite at least $k$ of them to dinner if you don't want any interpersonal tension? }

\begin{block}{Formalized Definition: }
 {\bf Input:} Given a graph $G=<V,E>$, and an integer $k$, \\
 {\bf Output:} is there a set of nodes $S\subseteq V$, $|S| = k$, such that no two nodes in $S$ are joined by an edge?
\end{block}
\end{itemize}

\begin{figure}
        \centering
        \includegraphics[width=0.9in]{L3-independentset.eps}
\end{figure}
The three nodes in blue are independent.
}

\frame
{
\frametitle{Independent Set -- another interesting instance}

\begin{figure}
 \begin{minipage}{0.45\textwidth}
 \includegraphics[width=\textwidth] {L3-independentsetgraph24-8.eps} 
 \end{minipage}
 \begin{minipage}{0.45\textwidth}
 \includegraphics[width=\textwidth] {L3-independentsetgraph24-9.eps} 
\end{minipage}
\end{figure}
The nodes in blue form independent sets. Left: 8 nodes. Right: 9 nodes. 

}


\frame{
\frametitle{ {\sc Vertex Cover } Problem }

\begin{itemize}
 \item 
Practical problem: \\ {\em 
Given n sites connected with paths, how many guards (or cameras)  should be deployed on sites to surveille ALL the paths?}

\begin{block}{Formalized Definition:}
 {\bf Input:} Given a graph $G=<V,E>$, and an integer $k$, \\
 {\bf Output:} is there a set of nodes $S\subseteq V$, $|S| = k$, such that each edge has at least one of its endpoints in $S$? 
\end{block}
\end{itemize}

\begin{figure}
        \centering
        \includegraphics[width=3.0in]{L3-vertexcover-example.eps}
\end{figure}
The nodes in red form vertex cover.
}


\frame{
\frametitle{ {\sc Vertex Cover } Problem: Observation }

\begin{figure}
        \centering
        \includegraphics[width=1.0in]{L3-vertexcover.eps}
\end{figure}

Observation: the complement of a vertex cover (in red) forms an independent set (in blue). 
}

\frame{
\frametitle{Reduction: {\sc Independent Set} $\le_P$ {\sc Vertex Cover} }

\begin{itemize}
 \item 
Transformation: map an {\sc IndependentSet} instance $<G, k>$ to a {\sc VertexCover} instance $<G', k'>$, where $G'=G$, and $k'=n-k$; \\
\end{itemize}
\begin{figure}
 \centering
 \includegraphics[width=3in]{L3-independentsettovertexcover.eps}
\end{figure}

} 

\frame{
\frametitle{Reduction: {\sc Independent Set} $\le_P$ {\sc Vertex Cover} }

\begin{figure}
 \centering
 \includegraphics[width=3in]{L3-independentsettovertexcoverredblue.eps}
\end{figure}

\begin{itemize}
\item 
Equivalence: $G$ has an independent set $S$ ($|S|=k$) $\Leftrightarrow$ $G'$ has a vertex cover $S'$ ($|S'|=n-k$). 
\end{itemize}

$\Rightarrow $  
\begin{itemize}
 \item Let $S$ be an independent set of $G$ (in blue);\\
 \item For an arbitrary edge $e=(u,v)$, we have $u \not\in S$ or $v \not\in S$; 
 \item Thus, $u \in V-S$ or $v \in V-S$;
 \item Define $S'=V-S$ (in red). $S'$ is a vertex cover of $G'=G$, and $|S'| = n-k$.
\end{itemize}
}

\frame{
\frametitle{How to do reduction?}
C. Papadimitriou said: 

{\it 
To show the problem NP-complete we start by toying with small instances of the problem, 

until we isolate one with an interesting behavior. 

Sometimes the properties of this instance immediately enable a simple NP-complete proof .... sometimes called ``gadget construction''...
}

(Excerpted from Computer and Complexity)
}


\frame{
\frametitle{}
\begin{block}{}
 Another simple reduction: {\sc Vertex Cover} $\le_P$ {\sc Set Cover}.
\end{block}
}

\frame{
\frametitle{ {\sc Set Cover} problem}
\begin{itemize}
 \item 
Practical problem: \\ {\em  
An anti-virus package identifies a virus based on its characteristic ``keywords'' set. A keyword might correspond to several viruses. To reduce the size of anti-virus software, it is interesting to detect  all viruses using a set of ``representative'' keywords rather than all keywords. }


\begin{block}{Formalized Definition: } 
{\bf Input:} a set $U$ of $n$ elements, a collection $S_1, S_2,...,S_m$ of subsets of $U$, and a number $k$. \\
{\bf Output:}  does there exist a collection of at most $k$ of these sets whose union is equal to $U$?
\end{block}
\end{itemize}

}

\frame{
\frametitle{ {\sc Set Cover} problem: an interesting instance}

\begin{figure}
 \includegraphics[width=2in]{setcover1.eps}
 % setcover1.eps: 22002048x0 pixel, 300 dpi, 186284.00x0.00 cm, bb=14 14 407 318
\end{figure}
In this instance, there is a collection of three of the sets whose union is equal to all of $U$: We can choose the tall thin oval on the left, together with the two polygons.
}


\frame{
\frametitle{Reduction: {\sc Vertex Cover} $\le_P$ {\sc Set Cover}}

\begin{itemize}
 \item 

Key observation: a special case of {\sc Set Cover}, where each element is covered by exactly two subsets, is in fact {\sc Vertex Cover}.
\begin{enumerate}
 \item 
Transformation: Given a {\sc Vertex Cover} instance $<G, k>$, create a {\sc Set Cover} instance: $k'=k$, $U=E$, $S_v = \{$ e : e incident to v$\}$; \\

\begin{figure}
 \includegraphics[width=2.8in]{L3-vertexcoversetcover.eps}
 % setcover1.eps: 22002048x0 pixel, 300 dpi, 186284.00x0.00 cm, bb=14 14 407 318
\end{figure}

\item 
Equivalence: $G$ has a vertex cover $C$ ($|C|=k$) (in blue) $ \Leftrightarrow$ $S_c$ ($c\in C$) describe a set cover (in blue).
\end{enumerate}
\end{itemize}

}

\frame{
\frametitle{}
\begin{block}{}
 A reduction via ``Gadget'': {\sc 3-SAT} $\le_P$ {\sc Independent Set}.
\end{block}
}

\frame{
\frametitle{ {\sc SAT (Satisfiability)} Problem }
\begin{itemize} 
 \item Notations: 
\begin{itemize}
 \item Boolean variable: $x_1, x_2, ..., x_n$, $x_i = TRUE/FALSE $;
 \item Literal (or term): a variable $x_i$, or its negative $\neg x_i$;
 \item Clause: a disjunction of literals: $C_1 = x_1 \vee \neg x_2 \vee ... \vee x_3 $;
 \item CNF( Conjunctive normal form): the conjunctions of clauses; $\phi = C_1 \wedge C_2 ... \wedge C_k$;
\end{itemize}
\item Practical problems:  \\ {\em 
      expressing constraints on a set of variables (in AI), verifying whether a circuit has the desired functionality (in VLSI), etc. } 
  
\begin{block}{Formalized Definition:} 
 {\bf Input:} Given a CNF $\phi = C_1 \wedge C_2 ... \wedge C_k$; \\
{\bf Output:} Is there an assignment of all $x_i$ such that all clauses $C_j$ are satisfied? 
\end{block}
\end{itemize}
Example: 
 $(x_1 \vee \neg x_2) \wedge ( \neg x_1 \vee \neg x_3 ) \wedge ( x_2 \vee \neg x_3 )$

True assignment:  $x_1 = FALSE, x_2= FALSE, x_3 = FALSE $;
}

\frame{
\frametitle{ {\sc SAT (Satisfiability)} Problem: Two viewpoints of true assignment }
\begin{itemize}
 
\item 
Example: 
 $(x_1 \vee \neg x_2) \wedge ( \neg x_1 \vee \neg x_3 ) \wedge ( x_2 \vee \neg x_3 )$

True assignment:  $x_1 = FALSE, x_2= FALSE, x_3 = FALSE $;
\item 
Two viewpoints of true assignment:
\begin{enumerate}
 \item Variables: giving each variable a TRUE/FALSE to satisfy all clauses;
 \item Clauses: In each clause, we select a literal and set it to be $TRUE$ to make the clause satisfied. However, there should be no conflict among the literals from different clauses, e.g., select $x_i$ from one clause and select $\neg x_i$ from another one. 
\end{enumerate}
\end{itemize}
}


\frame{
\frametitle{{\sc Independent Set} problem: Gadget }

\begin{itemize}
 \item Gadget: a small, useful, and cleverly-designed machine or tool; a piece with specific functionality, which can be used to simulate another problem. Say, simulate $variables$  and $clauses$ in SAT problem.
 
\item For example, in {\sc Independent Set} problem, clique is a gadget with functionality ``OR'': choose 1 OR choose 2 OR choose 3 (only one vertex of a clique can appear in an independent set). Thus, we can use it to simulate the ``OR'' relationship in a clause. 
\end{itemize}

\begin{figure}
 \includegraphics[width=1.5in]{L3-clique.eps}
\end{figure}
}

\frame{
\frametitle{A special case of {\sc Independent Set} }

\begin{figure}
 \includegraphics[width=1.5in]{L3-independentsetsat.eps}
\end{figure}


Observation: 


\begin{itemize}
\item Let's denote the selection of node $i$ as $x_i = TRUE$. Then we have: 
\begin{enumerate} 
 \item Cannot choose 1 AND 4 simultaneously; (variable: $x_1 = \neg x_4$ ) 
 \item Choose 1 OR 2 OR 3;          (clause:  $C_1 = x_1 \vee x_2 \vee x_3 $)
 \item Choose 4 OR 5 OR 6;	   (clause: $C_2 = \neg x_1 \vee x_5 \vee x_6 $)	
 \item Thus if we were required to select an independent set of size $k=2$, we have to choose one from 1,2,3 AND another from 4,5,6.  	(a CNF $\Phi = C_1 \wedge C_2$ )
 %\item $( x_1 \vee x_2 \vee x_3 ) \wedge ( \neg x_1 \vee x_5 \vee x_6)$. ($x_i$ means the selection of node $i$ in {\sc Independent Set}. )
\end{enumerate}
\end{itemize}
}

\frame{
\frametitle{{\sc 3SAT} $\le_P$ {\sc Independent Set}: Transformation }

\begin{itemize}
 \item 
   For a given $SAT$ instance $\phi$ with $k$ clauses, constructing an {\sc Independent Set} instance $(G, k')$ as follows: 
\begin{enumerate}
 \item $G$ consists of $k$ triangles: each triangle corresponds to a clause $C_i$; the nodes are labeled with the literals; connecting $x_i$ and $\neg x_i$ with an edge; \\

 \item Set $k' = k$; 
\end{enumerate}
\item 
Example: 

$ (x_1 \vee x_2 \vee x_3) \wedge ( \neg x_1 \vee x_5 \vee x_6 )$ 


\begin{figure}
\includegraphics[width=3in]{L3-satindependentset.eps}
\end{figure}

\item 
Intuition: edge represents ``conflicts''; we should identify $k$ nodes (each node from a triangle) without connections (no conflict);
\end{itemize}
}

\frame{
\frametitle{{\sc 3SAT} $\le_P$ {\sc Independent Set}: Equivalence }
$\Rightarrow $ \\
\begin{itemize}
 \item 
Suppose $\phi$ is satisfiable; \\
\item 
There is an assignment such that in each clause, at least one literal is satisfied;  \\
\item 
Choose exactly one satisfied literal from each clause;  \\
\item 
The corresponding nodes form an independent set;  
\end{itemize}

$\Leftarrow $ \\
\begin{itemize}
 \item 
Suppose $S$ is an independent set, and $|S|=k$;  \\
\item 
$S$ contains exactly one node from each triangle; (?) \\
\item 
Constructing an assignment: if $v_i \in S$, $x_i=TRUE$, and  $x_i = FALSE$ otherwise; \\
\item 
Notice that $v_i$ and $\neg v_i$ would not appear in $S$ simultaneously. 
\item 
$\phi$ is satisfied by this assignment. 
\end{itemize}
}

\frame{
\frametitle{}
\begin{block}{}
 A reduction via ``gadget'': {\sc SAT } $\le_P$ {\sc Hamilton Cycle}.
\end{block}
}


\frame{
\frametitle{ {\sc Hamilton Cycle} Problem}

\begin{figure}
  \subfigure{ \includegraphics[height=1.3in]{L3-hamiltoncyclegame.eps} } 
  \subfigure{ \includegraphics[height=1.3in]{L3-hamiltoncyclegameboard.eps} } 
\end{figure}

A game invented by Sir William Hamilton in 1857. 

\begin{block}{Formalized Definition:}
 {\bf Input:} Given a graph $G=<V,E>$ \\
 {\bf Output:} Is there a cycle visiting every node exactly once?
\end{block}
}

\frame{ 
\frametitle{{\sc Hamilton Cycle}: two examples  } 
\begin{figure}
  \subfigure{ \includegraphics[height=1.5in]{L3-hamiltoncycleexample1.eps} } 
  \subfigure{ \includegraphics[height=1.5in]{L3-hamiltoncycleexample2.eps} } 
\end{figure}
} 


\frame{
\frametitle{{\sc Hamilton Cycle} Problem Application: DNA sequencing}

\begin{figure}
 \includegraphics[width=2.5in]{L3-dnasequencing.eps}
\end{figure}

DNA $\Rightarrow$ small fragments called reads (say ~500 bp). 
}

\frame{
\frametitle{{\sc Hamilton Cycle} Problem Application: DNA sequencing}

\begin{itemize}
 \item Intuition: 100 copies of a book were sheared (randomly) into scrip. Can we read out the book from these scrip?
 \item Utilizing the overlapping information between two fragments to do fragment assembly! 
 \item Construct a graph: a node denotes a fragment, and if the head of one fragment is equal to the tail of another fragment, we define an directed edge between these two nodes. 
 \item Observation: Reading the original sequence corresponds to traveling all nodes exactly once; thus we obtain a Hamilton path! 
\end{itemize}
\begin{figure}
 \includegraphics[width=3.5in]{L3-hamiltonpathdnanew.eps}
\end{figure}
}


\frame{
\frametitle{{\sc Hamilton Cycle} Problem: Gadget}

\begin{itemize}
 \item Should visit a line of nodes from left to right, OR from right to left.  
 \item Should visit each node $C_i$: the ways to visit $C_i$. The connection manner of $C_i$ defines the possible traveling direction of the line of nodes, e.g., if we want to visit node $C_1$, we have to travel the line $P_1$ from left to right, or travel $P_2$ from right to left. 
\end{itemize}
\begin{figure}
 \includegraphics[width=2in]{L3-sathamiltongadgets.eps}
\end{figure}
}

\frame{
\frametitle{Reduction {\sc 3SAT} $\le_P$ {\sc Hamilton Cycle} } 
(Transformation) \\
For a given SAT instance $\phi$, we construct a {\sc Hamilton Cycle} instance $G$ as follows: 

\begin{enumerate}
 \item 
 Variable $\Rightarrow$  a line of nodes for each variable; 
\item 
Clause $\Rightarrow$ a special node $C_i$. $C_i$ connects to the line $j$ in ``clockwise'' direction if it contains $x_j$ and connects in ``counter-clockwise'' direction if it contains $\neg x_j$. 
\item Two special nodes $s$ and $t$: 
\end{enumerate}

\begin{figure}
 \includegraphics[width=2.8in]{L3-sathamilton.eps}
\end{figure}
}

\frame{
\frametitle{{\sc Hamilton Cycle} Problem: Gadget}

\begin{itemize}
 \item 
True assignment $\Rightarrow$ a cycle. We travel line $P_i$ from left to right if $x_i=T$, and travel from right to left if $x_i = F$.
 \item 
For example: $x_1 = T$, $x_2 = F$, $x_3=T$ 
\end{itemize}
\begin{figure}
 \includegraphics[width=2in]{L3-sathamilton-sat.eps}
\end{figure}
}

\frame{
\frametitle{{\sc Hamilton Cycle} Problem: Gadget}
\begin{itemize}
 \item 
False assignment $\Rightarrow$ cannot visit $C$ node. We travel line $P_i$ from left to right if $x_i=T$, and travel from right to left if $x_i = F$.
 \item 
For example: $x_1 = F$, $x_2 = T$, $x_3=F$. We have no chance to visit $C$.
\end{itemize}
\begin{figure}
 \includegraphics[width=2in]{L3-sathamilton-unsat.eps}
\end{figure}
}


\frame{
\frametitle{Reduction {\sc 3SAT} $\le_P$ {\sc Hamilton Cycle}: Equivalence}
$\Rightarrow $ 
\begin{itemize}
 \item 
Suppose $\phi$ can be satisfied by an assignment $x_1 = TRUE, x_2=FALSE, x3=TRUE$; \\
\item 
Starting from $s$; travel line $i$ from left to right if $x_i = TRUE$; otherwise from right to left; \\
\item 
if $C_j$ is satisfied by literal $x_i$ or $\neg x_i$, then travel $C_j$ when traveling line $i$; \\
\item 
return to $s$ from $t$; \\ 
\item 
In summary, all nodes will be visited, and none of them will be visited twice.
\end{itemize}
$\Leftarrow $ 
\begin{itemize}
 \item 
Suppose there is a Hamilton cycle;   \\
\item 
Assign $x_i = TRUE$ iff  line $i$ are visited from left to right; \\
\item 
This assignment satisfies $\phi$; 
\item 
Each clause $C_j$ is satisfied. Why? 
\end{itemize}
}

\frame{
\frametitle{}
\begin{block}{}
 A simple reduction:  {\sc Hamilton Cycle} $\le_P$ {\sc TSP (Traveling Salesman Problem) }.
\end{block}
}

\frame{
\frametitle{ {\sc TSP (Traveling Salesman Problem) } }
Intuition: A salesman tries to travel $n$ cities with the shortest tour. 

\begin{figure}
 \includegraphics[width=3in] {tsp1.eps}
\end{figure}

The tour path with the shortest length is  $1, \ 2, \ 3, \ 4, \ 5, \ 1$ with red color. 
}



\frame{
\frametitle{ {\sc TSP (Traveling Salesman Problem) } }
Optimal tour of 49 cities in the USA (solved by Dantzig, Fulkerson, and Johnson in 1954).


\begin{figure}
 \includegraphics[width=1.8in] {L3-TSP42cities-map.eps}
\end{figure}
\begin{figure}
 \includegraphics[width=1.8in] {L3-TSP42cities.eps}
\end{figure}

Origin: Karl Menger (1920), Mahalanobis (1940), Jensen (1942), Gosh (1948), Marks (1948) \\

}


\frame{
\frametitle{ {\sc TSP (Traveling Salesman Problem) research progress} }


\begin{figure}
 \includegraphics[width=2.8in] {L3-TSPprogress.eps}
\end{figure}

(Excerpted from http://www.tsp.gatech.edu/history/milestone.html.)
}

\frame{
\frametitle{TSP cont'd}

 \begin{itemize}
 \item Practical problem: \\
 	path planning: the most efficient motion of a robotic arm that drill $n$ holes on a VLSI chip;
\end{itemize}
\begin{block}{Formalized Definition:}
 {\bf Input:} Given a graph $G=<V,E>$, distance $d: E \rightarrow R$, and a bound $B$; \\
 {\bf Output:} is there a Hamilton cycle with total distance less than $B$? 
\end{block}

}




% \frame{
% \frametitle{Key observation: A special case of TSP}
% 
% 
% $G'$ has a tour with total distance not great than $0$ iff there is a Hamilton cycle in $G$. 
% 
% 
% \begin{figure}
%  \includegraphics[width=3in] {L3-hamiltoncycletsp.eps}
% \end{figure}
% 
% }

\frame{
\frametitle{Reduction: {\sc Hamilton Cycle} $\le_P$ {\sc TSP} }
\begin{itemize}
 \item 
Transformation: for a {\sc Hamilton Cycle} instance $G=<V, E>$, we construct a {\sc TSP} instance as follows: $G'$: a complete graph with $n$ node, $d(u, v) = 0$ if $(u, v) \in E$; otherwise $d(u,v)=+\inf$. Let $B = 0$; 

\begin{figure}
 \includegraphics[width=3in] {L3-hamiltoncycletsp.eps}
\end{figure}


\item 
Equivalence:  a tour with total distance $\le 0$ in $G'$ corresponds to a Hamilton cycle in $G$. 

\end{itemize}
}

\frame{
\frametitle{}
\begin{block}{}
 A simple reduction:  {\sc SAT} $\le_P$ {\sc Graph Coloring }.
\end{block}
}


\frame{
\frametitle{ {\sc Graph Coloring} problem }
\begin{itemize}
 \item 
Practical problem:  \\ {\it 
Consider assign one of the $k$ wavelength to $n$ wireless devices. If two devices are sufficiently close to each other, we should assign them with different wavelength to prevent interference.  }

\begin{block}{Formalized Definition:}
 {\bf Input:} Given a graph $G=<V,E>$, an integer $k$; \\
 {\bf Output:} does $G$ has a $k-coloring$? (each node has a color, but the two endpoints of an edge have different colors.) 
\end{block}
\end{itemize}
}

\frame{
\frametitle{Graph coloring: a brief introduction }
There are three types of coloring: 
\begin{enumerate}
 \item Vertex coloring: coloring the vertices of a graph such that no two adjacent vertices share the same color; 
 \item Edge coloring: coloring edges so that no two adjacent edges share the same color
 \item Face coloring: (planar graph) coloring faces or region so that no two faces that share a boundary have the same color.
 \end{enumerate}

\begin{tiny}
 


\begin{figure}
 \begin{minipage}{0.2\textwidth}
 \includegraphics[width=\textwidth]{L3-vertexcoloring.eps}
 \caption{ \begin{tiny} Peterson graph \end{tiny} }
\end{minipage}
\begin{minipage}{0.2\textwidth}
 \includegraphics[width=\textwidth]{L3-edgecoloring.eps}
 \caption{\begin{tiny} Desargues graph: the complement of Peterson graph \end{tiny}}
\end{minipage}
\begin{minipage}{0.2\textwidth}
 \includegraphics[width=\textwidth]{L3-facecoloring.eps}
 \caption{\begin{tiny}  USA map. \end{tiny}}
\end{minipage}
\end{figure}
\end{tiny}

\footnote{The following 3 slides were excerpted from Wiki::Graph Coloring.} 
}

\frame{
\frametitle{Transforming other coloring problems into a vertex version. }


\begin{enumerate}
 \item Edge coloring $\Rightarrow$ vertex coloring ( Line graph ): an edge coloring of a graph is just a vertex coloring of its line graph.  

\begin{figure}
 \begin{minipage}{0.2\textwidth}
 \includegraphics[width=\textwidth]{L3-linegraph1.eps} 
 \end{minipage}
 \begin{minipage}{0.2\textwidth}
 \includegraphics[width=\textwidth]{L3-linegraph2.eps} 
 \end{minipage}
\end{figure}

 \item Face coloring $\Rightarrow$ vertex coloring ( graph dual ): a face coloring of a planar graph is just a vertex coloring of its planar dual.


\begin{figure}
\includegraphics[width=1in]{L3-dualgraph.eps} 
\end{figure}

\end{enumerate}
}

\frame{
\frametitle{Planar graph: 4 coloring}

 \begin{itemize}
   \item 
 

 The four-color theorem was proven in 1976 by Kenneth Appel and Wolfgang Haken. 
\item 
It was the first major theorem to be proved using a computer. 
\item 
Appel and Haken's approach started by showing that there is a particular set of 1,936 maps, each of which cannot be part of a smallest-sized counterexample to the four color theorem. 
\item 

Appel and Haken used a special-purpose computer program to confirm that each of these maps had this property.
\end{itemize}

}

\frame{
\frametitle{General graph: $2$-coloring.  }


\begin{itemize}
 \item $2$-coloring is in $P$.  
 \item A graph $G$ can be $2$-coloring iff $G$ is a bi-partitie. 
\end{itemize}

\begin{figure}
\includegraphics[width=2in]{L3-2coloring.eps} 
\end{figure}

}


\frame{
\frametitle{General graph: $k$-coloring. $k\ge 3$ }


\begin{itemize}
 \item Using dynamic programming and a bound on the number of maximal independent sets, k-colorability can be decided in time and space $O(2.445^n)$.

 \item 
 Using the principle of inclusion–exclusion and Yates’s algorithm for the fast zeta transform, k-colorability can be decided in time $O(2^n n)$ for any $k$. 
\item Faster algorithms are known for 3- and 4-colorability, which can be decided in time $O(1.3289^n)$  and $O(1.7504^n)$, respectively.
\end{itemize}
}

\frame
{
\frametitle{Graph Coloring -- Instance}
\begin{figure}
 \includegraphics[width=1.5in] {180px-Petersen_graph_3-coloring.svg.eps}
\end{figure}
A proper vertex coloring of the Petersen graph with $3$ colors, the minimum number possible.
}

\frame{
\frametitle{ {\sc 3-Coloring} problem: Gadget }
\begin{itemize}
\item  Triangle: Suppose a node has already been colored in Green, one of the other nodes should be Red OR Blue; \\
(can be used to express Boolean variable $x_i = TRUE $ $OR$ $ FALSE$. Red : True, Blue: False)
\item 
Fork: If the three endpoints use all RGB colors, the root cannot be colored. 
\item 
Crown: $C$ can be colored iff one of the three input is colored in Red. 
\end{itemize}

\begin{figure}
 \includegraphics[width=4in] {L3-coloringgadgets.eps}
\end{figure}
}

\frame{
\frametitle{ Case 1: the three input of crown = BBB }

\begin{figure}
 \includegraphics[width=2in] {L3-coloringclausecrownBBB.eps}
\end{figure}

$I_1 = B$, $I_2 = B$, $I_3 = B$ $\Rightarrow$ $C$ cannot be colored. 
}

\frame{
\frametitle{ Case 2: the three input of crown = BBR }


\begin{figure}
 \includegraphics[width=2in] {L3-coloringclausecrownBBR.eps}
\end{figure}

$I_1 = B$, $I_2 = B$, $I_3 = R$ $\Rightarrow$ $C$ can be colored. 
}


\frame{
\frametitle{ Case 3: the three input of crown = BRB }


\begin{figure}
 \includegraphics[width=2in] {L3-coloringclausecrownBRB.eps}
\end{figure}

$I_1 = B$, $I_2 = R$, $I_3 = B$ $\Rightarrow$ $C$ can be colored. 
}


\frame{
\frametitle{ Case 4: the three input of crown = BRR }


\begin{figure}
 \includegraphics[width=2in] {L3-coloringclausecrownBRR.eps}
\end{figure}

$I_1 = B$, $I_2 = R$, $I_3 = R$ $\Rightarrow$ $C$ can be colored. 
}


\frame{
\frametitle{ Case 5: the three input of crown = RBB }


\begin{figure}
 \includegraphics[width=2in] {L3-coloringclausecrownRBB.eps}
\end{figure}

$I_1 = R$, $I_2 = B$, $I_3 = B$ $\Rightarrow$ $C$ can be colored. 
}



\frame{
\frametitle{ Case 6: the three input of crown = RBR }


\begin{figure}
 \includegraphics[width=2in] {L3-coloringclausecrownRBR.eps}
\end{figure}

$I_1 = R$, $I_2 = B$, $I_3 = R$ $\Rightarrow$ $C$ can be colored. 
}


\frame{
\frametitle{ Case 7: the three input of crown = RRB }


\begin{figure}
 \includegraphics[width=2in] {L3-coloringclausecrownRRB.eps}
\end{figure}

$I_1 = R$, $I_2 = R$, $I_3 = B$ $\Rightarrow$ $C$ can be colored. 
}


\frame{
\frametitle{ Case 8: the three input of crown = RRR }


\begin{figure}
 \includegraphics[width=2in] {L3-coloringclausecrownRRR.eps}
\end{figure}

$I_1 = R$, $I_2 = R$, $I_3 = R$ $\Rightarrow$ $C$ can be colored. 
}

\frame{
\frametitle{{\sc SAT} $\le_P$ {\sc 3-Coloring}: Transformation }
---Transformation: a variable $\Rightarrow$ a triangle; 

\begin{figure}
 \includegraphics[width=2in] {L3-coloringvariables.eps}
\end{figure}

}

\frame{
\frametitle{{\sc SAT} $\le_P$ {\sc 3-Coloring}: Transformation  cont'd}
\begin{itemize}
 \item 
 Transformation: Clause $\Rightarrow$ connecting inputs with literals.  
 \item 
 Example: $C = (x_1 \vee \neg x_2 \vee x_3)$ 
\end{itemize}
\begin{figure}
 \includegraphics[width=1.5in] {L3-coloringclause.eps}
\end{figure}

Note: The node $C$ can be colored iff one of the three input is colored in Red, i.e., at least one literal is satisfied.
}


% \frame{
% \frametitle{ True assignment $\Rightarrow$ 3-Coloring }
% 
% $x_1 = T$,  $x_2 = T$, $x_3 = F$.
% \begin{figure}
%  \includegraphics[width=2in] {L3-coloringclause-satcase1.eps}
% \end{figure}
% }

 \frame{
 \frametitle{ True assignment $\Rightarrow$ 3-Coloring }
\begin{itemize}
 \item 
 Clause $\Rightarrow$ connecting inputs with literals.  
 \item 
 Example: $C = (x_1 \vee \neg x_2 \vee x_3)$ 
 \item 
 True assignment: $x_1 = T$,  $x_2 = T$, $x_3 = F$.
\end{itemize}

 \begin{figure}
  \includegraphics[width=1.8in] {L3-coloringclause-satcase1.eps}
 \end{figure}
 }

\frame{
\frametitle{ False assignment $\Rightarrow$ No 3-Coloring }
\begin{itemize}
 \item 
Clause $\Rightarrow$ connecting inputs with literals.  
 \item 
 Example: $C = (x_1 \vee \neg x_2 \vee x_3)$ 
 \item 
False assignment: $x_1 = F$,  $x_2 = T$, $x_3 = F$.
\end{itemize}

\begin{figure}
 \includegraphics[width=1.8in] {L3-coloringclause-unsat.eps}
\end{figure}
}

\frame{
\frametitle{Reduction: {\sc SAT} $\le_P$ {\sc 3-Coloring} }
\begin{Proof}
$\Rightarrow $ \\
\begin{itemize}
 \item 
Consider a true assignment;  \\
\item 
Color $v_i$ Red if $x_i = TRUE$; otherwise $Blue$; \\
\item 
This is a 3-Coloring. ( $C$ can be colored unless ALL 3 input are in Blue. )
\end{itemize}

$\Leftarrow $ \\
\begin{itemize}
 \item 
Consider a 3-Coloring; (w.l.o.g, suppose node $T$ is in Red, $F$ is in Blue, and $base$ is in Green.) \\
\item 
Let $x_i = TRUE$ if $v_i$ is in Red; otherwise, $x_i=FALSE$;
\item 
This is a true assignment. (Each clause $C_j$ has a satisfied term.)
\end{itemize}
\end{Proof}
}

\frame{
\frametitle{}
\begin{block}{}
 Another reduction via gadget: {\sc SAT} $\le_P$ {\sc Subset Sum}.
\end{block}
}

\frame{
\frametitle{ {\sc Subset Sum} problem}

\begin{block}{Formalized Definition:}
 {\bf Input:} Given $n$ numbers $S={w_1, w_2, ..., w_n}$, and an objective value $W$;  \\
 {\bf Output:} is there a subset $S' \subset S$ such that the sum of $S'$ is $W$? 
\end{block}

Example: $S=\{1, 3, 5, 7, 11, 13, 17, 19\}$, $W=33$; 

	Solution: $S'=\{ 3, 13, 17\}$
}

\frame{
\frametitle{ {\sc Subset Sum} problem: Gadget}

Expressing all numbers in decimal format: 

\begin{figure}
 \includegraphics[width=1.5in] {L3-subsetsumgadget.eps}
\end{figure}

Meaning: we should choose either $w_i$ OR $w_j$. 

}

\frame{
\frametitle{ {\sc 3SAT} $\le_P$ {\sc Subset Sum}: Transformation}
\begin{itemize}
 \item 
Variable $x_i$ $\Rightarrow$ two numbers $v_i$ and $v_i'$. (Intuition: to assure that exactly one of $v_i$ and $v_i'$ should be selected. )   \\
\item 
Clause $C_j$ $\Rightarrow$ two numbers $s_j$ and $s_j'$, and set the final column as follows: $v_i=1$ if $C_j$ contains $x_i$, and $v_i'=1$ otherwise. (Intuition: the number denotes how many literals were satisfied.) \\
\end{itemize}

\begin{figure}
 \includegraphics[width=3.8in] {L3-subsetsum.eps}
\end{figure}


}

\frame{
\frametitle{ {\sc 3SAT} $\le_P$ {\sc Subset Sum}: Equivalence }
$\Rightarrow $
\begin{itemize}
 \item 
Consider a true assignment; \\
\item If $x_i = TRUE$, then select $v_i$; otherwise select $v_i'$; \\
\item If $C_j$ has 1 satisfied term, select $s_j'$ and $s_j$;  \\
\item if $C_j$ has 2 satisfied terms, select $s_j'$; \\
\item if $C_j$ has 3 satisfied terms, select $s_j$. \\
\item  The sum of subset is exactly $W$.
\end{itemize}
} 

\frame{ 
\frametitle{ Case 1: $x_1 = T$, $x_2 = T$, $x_3 = T$ (True assignment) } 
\begin{figure}
 \includegraphics[width=1.1in] {L3-satsubsetsum-sat.eps}
\end{figure}
True assignment $x_1 = T$, $x_2=T$, $x_3=T$ $\Rightarrow$ $v_1 + v_2 + v_3 + s_1' = W$. 
}

\frame{ 
\frametitle{ Case 2: $x_1 = T$, $x_2 = T$, $x_3 = F$ (True assignment) } 
\begin{figure}
 \includegraphics[width=1.1in] {L3-satsubsetsum-sat-TTF.eps}
\end{figure}
True assignment $x_1 = T$, $x_2=T$, $x_3=F$ $\Rightarrow$ $v_1 + v_2 + v_3 + s_1 + s_1' = W$. 
}

\frame{ 
\frametitle{ Case 3: $x_1 = T$, $x_2 = F$, $x_3 = T$ (True assignment) } 
\begin{figure}
 \includegraphics[width=1.1in] {L3-satsubsetsum-sat-TFT.eps}
\end{figure}
True assignment $x_1 = T$, $x_2=F$, $x_3=T$ $\Rightarrow$ $v_1 + v_2 + v_3 + s_1 = W$. 
}

\frame{ 
\frametitle{ Case 4: $x_1 = T$, $x_2 = F$, $x_3 = F$ (True assignment) } 
\begin{figure}
 \includegraphics[width=1.1in] {L3-satsubsetsum-sat-TFF.eps}
\end{figure}
True assignment $x_1 = T$, $x_2=F$, $x_3=F$ $\Rightarrow$ $v_1 + v_2 + v_3 + s_1' = W$. 
}

\frame{ 
\frametitle{ Case 5: $x_1 = F$, $x_2 = T$, $x_3 = T$ (True assignment) } 
\begin{figure}
 \includegraphics[width=1.1in] {L3-satsubsetsum-sat-FTT.eps}
\end{figure}
True assignment $x_1 = F$, $x_2=T$, $x_3=T$ $\Rightarrow$ $v_1 + v_2 + v_3 + s_1 + s_1' = W$. 
}


\frame{ 
\frametitle{ Case 6: $x_1 = F$, $x_2 = F$, $x_3 = T$ (True assignment) } 
\begin{figure}
 \includegraphics[width=1.1in] {L3-satsubsetsum-sat-FFT.eps}
\end{figure}
True assignment $x_1 = F$, $x_2=F$, $x_3=T$ $\Rightarrow$ $v_1 + v_2 + v_3 + s_1' = W$. 
}


\frame{ 
\frametitle{ Case 7: $x_1 = F$, $x_2 = F$, $x_3 = F$ (True assignment) } 
\begin{figure}
 \includegraphics[width=1.1in] {L3-satsubsetsum-sat-FFF.eps}
\end{figure}
True assignment $x_1 = F$, $x_2=F$, $x_3=F$ $\Rightarrow$ $v_1 + v_2 + v_3 + s_1 + s_1' = W$. 
}

\frame{ 
\frametitle{ Case 8: $x_1 = F$, $x_2 = T$, $x_3 = F$ (False assignment) } 

\begin{figure}
 \includegraphics[width=1. in] {L3-satsubsetsum-unsat.eps}
\end{figure}
False assignment $x_1 = F$, $x_2=T$, $x_3=F$ $\Rightarrow$ the sum of the lowest digit is $0$, i.e., $v_1' + v_2 + v_3' = 1110$. We cannot get a sum of $1114$ even if we choose $s_1$ plus $s_1'$. 
} 

\frame{
\frametitle{{\sc 3SAT} $\le_P$ {\sc Subset Sum}: Equivalence  cont'd }
$\Leftarrow $
\begin{itemize}
 \item 
Consider a subset $S'$; \\
\item If $v_i$ is selected, set $x_i = T$, and $x_i = F$ otherwise;\\
\item  This is a true assignment. (?) \\
\item  (Hint: the lowest digit of $W$ is 4, while the lowest digit of $s_1 + s_1'$ is 3. This means that at least one ``1'' was selected in the final column. )
\end{itemize}
}

\frame{
\frametitle{So far we have the following relative hardness results.}
\begin{figure}
 \includegraphics[width=4.5in]{L4-NPC-Tree.eps}
\end{figure}
}

\end{document}
